Index: jmh-core/src/main/java/org/openjdk/jmh/runner/options/CommandLineOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jmh-core/src/main/java/org/openjdk/jmh/runner/options/CommandLineOptions.java	(revision 949:f90aef7f1d2c93e0d3f09593f67104ae4e7617bc)
+++ jmh-core/src/main/java/org/openjdk/jmh/runner/options/CommandLineOptions.java	(revision 949+:f90aef7f1d2c+)
@@ -30,6 +30,7 @@
 import joptsimple.OptionSpec;
 import org.openjdk.jmh.annotations.Mode;
 import org.openjdk.jmh.annotations.Threads;
+import org.openjdk.jmh.profile.ExternalProfiler;
 import org.openjdk.jmh.profile.Profiler;
 import org.openjdk.jmh.profile.ProfilerFactory;
 import org.openjdk.jmh.results.format.ResultFormatType;
@@ -38,12 +39,7 @@
 import org.openjdk.jmh.util.Optional;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -442,18 +438,28 @@
     public void listProfilers() {
         StringBuilder supported = new StringBuilder();
         StringBuilder unsupported = new StringBuilder();
+
+        List<Class<? extends Profiler>> discoveredProfilers = ProfilerFactory.getDiscoveredProfilers();
+
         for (Class<? extends Profiler> s : ProfilerFactory.getAvailableProfilers()) {
             List<String> initMessages = new ArrayList<String>();
             if (ProfilerFactory.checkSupport(s, initMessages)) {
-                supported.append(String.format("%20s: %s\n", ProfilerFactory.getLabel(s), ProfilerFactory.getDescription(s)));
+                supported.append(String.format("%20s: %s %s",
+                        ProfilerFactory.getLabel(s),
+                        ProfilerFactory.getDescription(s),
+                        discoveredProfilers.contains(s) ? "(discovered)\n" : "\n"));
             } else {
-                unsupported.append(String.format("%20s: %s\n", ProfilerFactory.getLabel(s), ProfilerFactory.getDescription(s)));
+                unsupported.append(String.format("%20s: %s %s",
+                        ProfilerFactory.getLabel(s),
+                        ProfilerFactory.getDescription(s),
+                        discoveredProfilers.contains(s) ? "(discovered)\n" : "\n"));
                 for (String im : initMessages) {
                     unsupported.append(String.format("%20s  %s\n", "", im));
                 }
                 unsupported.append("\n");
             }
         }
+
         if (!supported.toString().isEmpty()) {
             System.out.println("Supported profilers:\n" + supported.toString());
         }
Index: jmh-core/src/main/java/org/openjdk/jmh/profile/ProfilerFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jmh-core/src/main/java/org/openjdk/jmh/profile/ProfilerFactory.java	(revision 949:f90aef7f1d2c93e0d3f09593f67104ae4e7617bc)
+++ jmh-core/src/main/java/org/openjdk/jmh/profile/ProfilerFactory.java	(revision 949+:f90aef7f1d2c+)
@@ -29,6 +29,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.ServiceLoader;
 
 public class ProfilerFactory {
 
@@ -45,6 +46,18 @@
         profs.add(StackProfiler.class);
         profs.add(LinuxPerfProfiler.class);
         profs.add(LinuxPerfAsmProfiler.class);
+        profs.addAll(getDiscoveredProfilers());
+        return profs;
+    }
+
+    public static List<Class<? extends Profiler>> getDiscoveredProfilers() {
+        List<Class<? extends Profiler>> profs = new ArrayList<Class<? extends Profiler>>();
+
+        ServiceLoader<Profiler> impl = ServiceLoader.loadInstalled(Profiler.class);
+
+        for (Profiler s : impl)
+            profs.add(s.getClass());
+
         return profs;
     }
 
